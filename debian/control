Source: rocksdb
Section: database
Priority: optional
Maintainer: Laszlo Boszormenyi (GCS) <gcs@debian.org>
Uploaders:
 Laszlo Boszormenyi (GCS) <gcs@debian.org>,
 Otto Kekäläinen <otto@debian.org>,
Build-Depends:
 cmake,
 debhelper-compat (= 13),
 libbz2-dev,
 libgflags-dev,
 liblz4-dev,
 libsnappy-dev,
 libzstd-dev,
 zlib1g-dev,
Standards-Version: 4.7.0
Rules-Requires-Root: no
Homepage: https://rocksdb.org/
Vcs-Browser: https://salsa.debian.org/debian/rocksdb
Vcs-Git: https://salsa.debian.org/debian/rocksdb.git

Package: librocksdb-dev
Section: libdevel
Architecture: amd64 arm64 armel armhf i386 loong64 mips mips64el mipsel ppc64el riscv64 s390x
Depends:
 libbz2-dev,
 libgflags-dev,
 liblz4-dev,
 librocksdb9.10 (= ${binary:Version}),
 libsnappy-dev,
 libzstd-dev,
 zlib1g-dev,
 ${misc:Depends},
Description: persistent Key-Value Store for Flash and RAM Storage (development)
 C++ library providing an embedded key-value store, where keys and values are
 arbitrary byte streams. It was developed at Facebook based on LevelDB and
 provides backwards-compatible support for LevelDB APIs.
 .
 RocksDB is optimized for Flash with extremely low latencies. RocksDB uses a
 Log Structured Database Engine for storage, written entirely in C++.
 .
 RocksDB features highly flexible configuration settings that may be tuned to
 run on a variety of production environments, including pure memory, Flash,
 hard disks or HDFS. It supports various compression algorithms and good tools
 for production support and debugging.
 .
 Features:
   - Designed for application servers wanting to store up to a few terabytes
     of data on locally attached Flash drives or in RAM
   - Optimized for storing small to medium size key-values on fast storage --
     flash devices or in-memory
   - Scales linearly with number of CPUs so that it works well on ARM
     processors
 .
 This package contains libraries and header files for developing
 applications that use librocksdb .

Package: librocksdb9.10
Section: libs
Architecture: amd64 arm64 armel armhf i386 loong64 mips mips64el mipsel ppc64el riscv64 s390x
Depends:
 ${misc:Depends},
 ${shlibs:Depends},
Description: persistent Key-Value Store for Flash and RAM Storage
 C++ library providing an embedded key-value store, where keys and values are
 arbitrary byte streams. It was developed at Facebook based on LevelDB and
 provides backwards-compatible support for LevelDB APIs.
 .
 RocksDB is optimized for Flash with extremely low latencies. RocksDB uses a
 Log Structured Database Engine for storage, written entirely in C++.
 .
 RocksDB features highly flexible configuration settings that may be tuned to
 run on a variety of production environments, including pure memory, Flash,
 hard disks or HDFS. It supports various compression algorithms and good tools
 for production support and debugging.
 .
 Features:
   - Designed for application servers wanting to store up to a few terabytes
     of data on locally attached Flash drives or in RAM
   - Optimized for storing small to medium size key-values on fast storage --
     flash devices or in-memory
   - Scales linearly with number of CPUs so that it works well on ARM
     processors

Package: rocksdb-tools
Architecture: amd64 arm64 armel armhf i386 loong64 mips mips64el mipsel ppc64el riscv64 s390x
Depends:
 ${misc:Depends},
 ${shlibs:Depends},
Description: persistent Key-Value Store for Flash and RAM Storage (tools)
 C++ library providing an embedded key-value store, where keys and values are
 arbitrary byte streams. It was developed at Facebook based on LevelDB and
 provides backwards-compatible support for LevelDB APIs.
 .
 RocksDB is optimized for Flash with extremely low latencies. RocksDB uses a
 Log Structured Database Engine for storage, written entirely in C++.
 .
 RocksDB features highly flexible configuration settings that may be tuned to
 run on a variety of production environments, including pure memory, Flash,
 hard disks or HDFS. It supports various compression algorithms and good tools
 for production support and debugging.
 .
 Features:
   - Designed for application servers wanting to store up to a few terabytes
     of data on locally attached Flash drives or in RAM
   - Optimized for storing small to medium size key-values on fast storage --
     flash devices or in-memory
   - Scales linearly with number of CPUs so that it works well on ARM
     processors
 .
 This package contains administration and data access tools.
